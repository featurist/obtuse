exec = require 'child_process'.exec
fs = require 'fs'
diff = require 'diff'

heading (text) =
    console.log (text)
    line ()

line (text) = console.log (text || '')
text (t) = process.stdout.write (t)

heading '# Obtuse'

line 'Obtuse makes README driven development executable, by ensuring that your README.md is generated by tests.'

line ()

heading '## How it works'

executable file = 'feature.pogo'
description file = 'feature.md'
line "Obtuse operates on pairs of files, the first being an executable file, such as `#(executable file)`"
line "and the second being the description of the feature, `#(description file)`."
line "Obtuse simply executes the executable file, and ensures that its output matches the description."

when they match () =
    text 'If it does, '

    try
        fs.write file! (executable file, "console.log 'hello!'", 'utf-8')
        fs.write file! (description file, "hello!\n", 'utf-8')

        output = exec! "pogo index.pogo #(executable file)"
        if (output == '')
            text 'no problem, '
    finally
        fs.unlink! (executable file)
        fs.unlink! (description file)

remove coloring from (text) =
    text.replace(new (RegExp "\033\\[\\d+m" 'g'), '')

when they dont match () =
    text "if it doesn't, "

    try
        fs.write file! (executable file, "console.log 'hello!'", 'utf-8')
        fs.write file! (description file, "goodbye", 'utf-8')

        colored output = exec! "pogo index.pogo #(executable file)"
        output = remove coloring from (colored output)
        expected output = "showing differences between feature.md and feature.pogo
                           +hello!
                           -goodbye"
        if (output == expected output)
            text 'it prints out the differences.'
        else
            console.log (diff.diff chars (expected output, output))
    finally
        fs.unlink! (executable file)
        fs.unlink! (description file)

when they match! ()
when they dont match! ()

line ()
line ()

heading '## An example'

line "Lets say you're writing a small useful utility, for example, a utility that generates the fibonacci sequence up to a given number of values. A utility you could imagine using just about every day."

line ()

fibonacci example () =
    desc file = 'README.md'
    tmp dir = '.test'
    fs.mkdir (tmp dir)
    test path (filename) =
        "#(tmp dir)/#(filename)"

    make file! (filename) contain (content block) =
        content =
            if (content block :: Function)
                content block ()
            else
                content block

        fs.write file! (test path (filename), content, 'utf-8')

    indent (text) =
        text.replace r/^(.+[^\s].*)$/gm "    $1"

    yo fib = 'yo-fib'

    description =
        "# #(yo fib): a command line tool for generating the fibonacci sequence

         `#(yo fib)` helps you generate the fibonacci sequence up to a specified number of values.

         usage: `#(yo fib) N`

         where `N` is the number of fibonacci numbers you want to generate.
         "

    make file! (desc file) contain (description)

    line "First you'd start by writing a description of how it worked in your `#(desc file)`:"
    line ()
    line (indent (description))

    exec file = 'README.pogo'

    line "Then you'd write a file that would generate the contents of the `#(desc file)` file, based on testing that `#(yo fib)` works they way you described it, we call this `#(exec file)`:"

    exec content =
        "exec = require 'child_process'.exec
         should = require 'should'

         text (s) =
             process.stdout.write (s)

         line (l) =
             console.log (l)

         yo fib generates the fibonacci sequence up to the specified number of values () =
             exec! './#(yo fib) 0'.should.equal ''
             exec! './#(yo fib) 1'.should.equal '0'
             exec! './#(yo fib) 2'.should.equal '0 1'
             exec! './#(yo fib) 3'.should.equal '0 1 1'
             exec! './#(yo fib) 4'.should.equal '0 1 1 2'
             exec! './#(yo fib) 10'.should.equal '0 1 1 2 3 5 8 13 21 34'

         given! (block) then (t) =
             try
                 block!()
                 text (t)
             catch (error)
                 console.log (error)

         line '# #(yo fib): a command line tool for generating the fibonacci sequence'
         line ''
         given!
             yo fib generates the fibonacci sequence up to the specified number of values! ()
         then '`#(yo fib)` helps you generate the fibonacci sequence up to a specified number of values.'
         line ''
         line ''
         line 'usage: `#(yo fib) N`

               where `N` is the number of fibonacci numbers you want to generate.'
         "

    make file! (exec file) contain (exec content)

    line ()
    line (indent (exec content))

    command = "pogo ../index.pogo #(exec file)"
    text "Then you can run `#(command)`"
    in directory! (dir, block) =
        cwd = process.cwd ()
        try
            process.chdir (dir)
            block! ()
        finally
            process.chdir (cwd)

    obtuse output = ''
    exit code = nil

    in directory! (tmp dir)
        try
            obtuse output = exec! (command)
            exit code = 0
        catch (error)
            exit code = error.code

    text " and see if the behaviour of `#(yo fib)` matches that of the description."
    text " In this case, it will just have an exit code of #(exit code), with "

    if (obtuse output == '')
        line 'no output.'
    else
        line "output of:"

        line (indent (obtuse output))

fibonacci example ()
